{"ast":null,"code":"var _jsxFileName = \"/Users/benjamindordoigne/Desktop/WMCA-Opportunities-App/src/components/blogItem/blogItem.jsx\";\nimport React, { Component } from \"react\";\nimport DOMPurify from \"dompurify\";\nimport CategoryTag from \"../categoryTag/categoryTag\";\n\nclass BlogItem extends Component {\n  videoIframe() {\n    // destructure props\n    const article = this.props.article; // create const variable to make a new url from the video url string\n\n    const videoUrl = new URL(article.VideoUrl); // retrieve pathname from url object\n\n    const videoPath = videoUrl.pathname; // retrieve search term if youtube link is taken from the address bar\n    // replace the start so we're left with a forward slash\n\n    const videoSearchPath = videoUrl.search.replace(\"?v=\", \"/\"); // if the host name of the url is youtube then we want to render our iframe\n    // with our youtube attritubes\n\n    if (videoUrl.host === \"youtu.be\" || videoUrl.host === \"www.youtube.com\") {\n      // check if the link is youtu.be, this determines which const variable\n      // (set above) we'll use as our src url\n      const videoSrc = videoUrl.host !== \"youtu.be\" ? `https://www.youtube.com/embed${videoSearchPath}` : `https://www.youtube.com/embed${videoPath}`;\n      return React.createElement(\"div\", {\n        className: \"iframe-container wdgt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"iframe\", {\n        src: videoSrc,\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true,\n        title: article.Name,\n        className: \"pure-u-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }));\n    } // if vimeo, then we want to render with our vimeo settings\n\n\n    if (videoUrl.host === \"vimeo.com\") {\n      return React.createElement(\"div\", {\n        className: \"iframe-container wdgt\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"iframe\", {\n        src: `https://player.vimeo.com/video${videoPath}`,\n        frameBorder: \"0\",\n        allow: \"autoplay; fullscreen\",\n        allowFullScreen: true,\n        title: article.Name,\n        className: \"pure-u-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }));\n    } // don't return anything if any of these conditions aren't met\n\n\n    return null;\n  }\n\n  render() {\n    // destructure props\n    const article = this.props.article;\n    const sanitize = DOMPurify.sanitize; // get published date parse the string and set variables for day,\n    // month and year to customise date layout\n\n    const parsedDate = Date.parse(article.PubDate);\n    const pubDateday = new Intl.DateTimeFormat(\"en-GB\", {\n      day: \"2-digit\"\n    }).format(parsedDate);\n    const pubDateMonth = new Intl.DateTimeFormat(\"en-GB\", {\n      month: \"long\"\n    }).format(parsedDate);\n    const pubDateYear = new Intl.DateTimeFormat(\"en-GB\", {\n      year: \"numeric\"\n    }).format(parsedDate); // store blog copy in const variable\n\n    const content = article.BlogContent;\n    return React.createElement(React.Fragment, null, React.createElement(\"article\", {\n      className: \"wdgt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, article.Name), React.createElement(\"p\", {\n      className: \"text-color-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, `${pubDateMonth} ${pubDateday}, ${pubDateYear}`), React.createElement(\"div\", {\n      className: \"wdgt\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(CategoryTag, {\n      blog: article,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default BlogItem;","map":{"version":3,"sources":["/Users/benjamindordoigne/Desktop/WMCA-Opportunities-App/src/components/blogItem/blogItem.jsx"],"names":["React","Component","DOMPurify","CategoryTag","BlogItem","videoIframe","article","props","videoUrl","URL","VideoUrl","videoPath","pathname","videoSearchPath","search","replace","host","videoSrc","Name","render","sanitize","parsedDate","Date","parse","PubDate","pubDateday","Intl","DateTimeFormat","day","format","pubDateMonth","month","pubDateYear","year","content","BlogContent"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nimport DOMPurify from \"dompurify\";\nimport CategoryTag from \"../categoryTag/categoryTag\";\n\nclass BlogItem extends Component {\n    videoIframe() {\n        // destructure props\n        const { article } = this.props;\n\n        // create const variable to make a new url from the video url string\n        const videoUrl = new URL(article.VideoUrl);\n        // retrieve pathname from url object\n        const videoPath = videoUrl.pathname;\n        // retrieve search term if youtube link is taken from the address bar\n        // replace the start so we're left with a forward slash\n        const videoSearchPath = videoUrl.search.replace(\"?v=\", \"/\");\n\n        // if the host name of the url is youtube then we want to render our iframe\n        // with our youtube attritubes\n        if (videoUrl.host === \"youtu.be\" || videoUrl.host === \"www.youtube.com\") {\n            // check if the link is youtu.be, this determines which const variable\n            // (set above) we'll use as our src url\n            const videoSrc =\n                videoUrl.host !== \"youtu.be\"\n                    ? `https://www.youtube.com/embed${videoSearchPath}`\n                    : `https://www.youtube.com/embed${videoPath}`;\n\n            return (\n                <div className=\"iframe-container wdgt\">\n                    <iframe\n                        src={videoSrc}\n                        frameBorder=\"0\"\n                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                        allowFullScreen\n                        title={article.Name}\n                        className=\"pure-u-1\"\n                    />\n                </div>\n            );\n        }\n        // if vimeo, then we want to render with our vimeo settings\n        if (videoUrl.host === \"vimeo.com\") {\n            return (\n                <div className=\"iframe-container wdgt\">\n                    <iframe\n                        src={`https://player.vimeo.com/video${videoPath}`}\n                        frameBorder=\"0\"\n                        allow=\"autoplay; fullscreen\"\n                        allowFullScreen\n                        title={article.Name}\n                        className=\"pure-u-1\"\n                    />\n                </div>\n            );\n        }\n\n        // don't return anything if any of these conditions aren't met\n        return null;\n    }\n\n    render() {\n        // destructure props\n        const { article } = this.props;\n        const { sanitize } = DOMPurify;\n\n        // get published date parse the string and set variables for day,\n        // month and year to customise date layout\n        const parsedDate = Date.parse(article.PubDate);\n        const pubDateday = new Intl.DateTimeFormat(\"en-GB\", {\n            day: \"2-digit\"\n        }).format(parsedDate);\n        const pubDateMonth = new Intl.DateTimeFormat(\"en-GB\", {\n            month: \"long\"\n        }).format(parsedDate);\n        const pubDateYear = new Intl.DateTimeFormat(\"en-GB\", {\n            year: \"numeric\"\n        }).format(parsedDate);\n\n        // store blog copy in const variable\n        const content = article.BlogContent;\n\n        return (\n            <>\n                <article className=\"wdgt\">\n                    <h1>{article.Name}</h1>\n                    <p className=\"text-color-primary\">\n                        {`${pubDateMonth} ${pubDateday}, ${pubDateYear}`}\n                    </p>\n                    <div className=\"wdgt\">\n                        <CategoryTag blog={article} />\n                    </div>\n                    {/*  {article.BlogImageBig && !article.VideoUrl && (\n            <img src={article.BlogImageBig} alt=\"\" className=\"pure-u-1 pure-img wdgt\" />\n          )}\n          {article.VideoUrl && this.videoIframe()}\n          <div dangerouslySetInnerHTML={{ __html: sanitize(content) }} /> */}\n                </article>\n            </>\n        );\n    }\n}\n\nexport default BlogItem;\n"]},"metadata":{},"sourceType":"module"}