{"ast":null,"code":"import axios from \"axios\"; // import action types\n\nimport { FETCH_LOADING, FETCH_BLOGS, FETCH_ELIGIBILITIES, FETCH_SKILLLEVELS, FETCH_CATEGORIES, FETCH_OPPORTUNITIES, FETCH_DATE, FETCH_SEARCH, FETCH_VISIBLERESULTS, FETCH_WHERE, FETCH_AGE } from \"./types\"; // get the protocol and domain name of the url\n\nconst baseUrl = window.location.origin; // append the api path to the end of the baseUrl, depending on environment\n// we're running and the testing the app\n\nconst testApiUrl = `${baseUrl}/todeleteopportunities.json`; //const apiUrl = `${baseUrl}/peoples-stories/api`;\n// default load status whilst data is loading\n\nexport const fetchLoading = () => {\n  return (dispatch, loading) => {\n    dispatch({\n      type: FETCH_LOADING,\n      payload: loading\n    });\n  };\n}; // export as named function\n\nexport const fetchBlogs = () => {\n  return async dispatch => {\n    const response = await axios.get(testApiUrl) // chain and return to use later\n    .then(res => {\n      return res.data;\n    }) // chain and return if promise was rejected\n    .catch(error => {\n      console.log(error);\n    }); // dispatch action and trigger state changes to store\n\n    dispatch({\n      type: FETCH_BLOGS,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_CATEGORIES,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_OPPORTUNITIES,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_SKILLLEVELS,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_ELIGIBILITIES,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_DATE,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_WHERE,\n      payload: response\n    });\n    dispatch({\n      type: FETCH_AGE,\n      payload: response\n    });\n  };\n}; // set action for search term to dispatch through\n\nexport const fetchSearch = searchTerm => ({\n  type: FETCH_SEARCH,\n  payload: searchTerm\n}); // set action for updating visible results to dispatch through\n\nexport const fetchVisibleResults = visibleResults => ({\n  type: FETCH_VISIBLERESULTS,\n  payload: visibleResults\n});","map":{"version":3,"sources":["/Users/benjamindordoigne/Desktop/WMCA-Opportunities-App/src/actions/index.jsx"],"names":["axios","FETCH_LOADING","FETCH_BLOGS","FETCH_ELIGIBILITIES","FETCH_SKILLLEVELS","FETCH_CATEGORIES","FETCH_OPPORTUNITIES","FETCH_DATE","FETCH_SEARCH","FETCH_VISIBLERESULTS","FETCH_WHERE","FETCH_AGE","baseUrl","window","location","origin","testApiUrl","fetchLoading","dispatch","loading","type","payload","fetchBlogs","response","get","then","res","data","catch","error","console","log","fetchSearch","searchTerm","fetchVisibleResults","visibleResults"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SACEC,aADF,EAEEC,WAFF,EAGEC,mBAHF,EAIEC,iBAJF,EAKEC,gBALF,EAMEC,mBANF,EAOEC,UAPF,EAQEC,YARF,EASEC,oBATF,EAUEC,WAVF,EAWEC,SAXF,QAYO,SAZP,C,CAcA;;AACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAAhC,C,CACA;AACA;;AACA,MAAMC,UAAU,GAAI,GAAEJ,OAAQ,6BAA9B,C,CACA;AAEA;;AACA,OAAO,MAAMK,YAAY,GAAG,MAAM;AAChC,SAAO,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC5BD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEnB,aAAR;AAAuBoB,MAAAA,OAAO,EAAEF;AAAhC,KAAD,CAAR;AACD,GAFD;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMG,UAAU,GAAG,MAAM;AAC9B,SAAO,MAAMJ,QAAN,IAAkB;AACvB,UAAMK,QAAQ,GAAG,MAAMvB,KAAK,CACzBwB,GADoB,CAChBR,UADgB,EAErB;AAFqB,KAGpBS,IAHoB,CAGfC,GAAG,IAAI;AACX,aAAOA,GAAG,CAACC,IAAX;AACD,KALoB,EAMrB;AANqB,KAOpBC,KAPoB,CAOdC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAToB,CAAvB,CADuB,CAWvB;;AACAX,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAElB,WAAR;AAAqBmB,MAAAA,OAAO,EAAEE;AAA9B,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEf,gBAAR;AAA0BgB,MAAAA,OAAO,EAAEE;AAAnC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEd,mBAAR;AAA6Be,MAAAA,OAAO,EAAEE;AAAtC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEhB,iBAAR;AAA2BiB,MAAAA,OAAO,EAAEE;AAApC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEjB,mBAAR;AAA6BkB,MAAAA,OAAO,EAAEE;AAAtC,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEb,UAAR;AAAoBc,MAAAA,OAAO,EAAEE;AAA7B,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEV,WAAR;AAAqBW,MAAAA,OAAO,EAAEE;AAA9B,KAAD,CAAR;AACAL,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAET,SAAR;AAAmBU,MAAAA,OAAO,EAAEE;AAA5B,KAAD,CAAR;AACD,GApBD;AAqBD,CAtBM,C,CAwBP;;AACA,OAAO,MAAMS,WAAW,GAAGC,UAAU,KAAK;AACxCb,EAAAA,IAAI,EAAEZ,YADkC;AAExCa,EAAAA,OAAO,EAAEY;AAF+B,CAAL,CAA9B,C,CAKP;;AACA,OAAO,MAAMC,mBAAmB,GAAGC,cAAc,KAAK;AACpDf,EAAAA,IAAI,EAAEX,oBAD8C;AAEpDY,EAAAA,OAAO,EAAEc;AAF2C,CAAL,CAA1C","sourcesContent":["import axios from \"axios\";\n\n// import action types\nimport {\n  FETCH_LOADING,\n  FETCH_BLOGS,\n  FETCH_ELIGIBILITIES,\n  FETCH_SKILLLEVELS,\n  FETCH_CATEGORIES,\n  FETCH_OPPORTUNITIES,\n  FETCH_DATE,\n  FETCH_SEARCH,\n  FETCH_VISIBLERESULTS,\n  FETCH_WHERE,\n  FETCH_AGE\n} from \"./types\";\n\n// get the protocol and domain name of the url\nconst baseUrl = window.location.origin;\n// append the api path to the end of the baseUrl, depending on environment\n// we're running and the testing the app\nconst testApiUrl = `${baseUrl}/todeleteopportunities.json`;\n//const apiUrl = `${baseUrl}/peoples-stories/api`;\n\n// default load status whilst data is loading\nexport const fetchLoading = () => {\n  return (dispatch, loading) => {\n    dispatch({ type: FETCH_LOADING, payload: loading });\n  };\n};\n\n// export as named function\nexport const fetchBlogs = () => {\n  return async dispatch => {\n    const response = await axios\n      .get(testApiUrl)\n      // chain and return to use later\n      .then(res => {\n        return res.data;\n      })\n      // chain and return if promise was rejected\n      .catch(error => {\n        console.log(error);\n      });\n    // dispatch action and trigger state changes to store\n    dispatch({ type: FETCH_BLOGS, payload: response });\n    dispatch({ type: FETCH_CATEGORIES, payload: response });\n    dispatch({ type: FETCH_OPPORTUNITIES, payload: response });\n    dispatch({ type: FETCH_SKILLLEVELS, payload: response });\n    dispatch({ type: FETCH_ELIGIBILITIES, payload: response });\n    dispatch({ type: FETCH_DATE, payload: response });\n    dispatch({ type: FETCH_WHERE, payload: response });\n    dispatch({ type: FETCH_AGE, payload: response });\n  };\n};\n\n// set action for search term to dispatch through\nexport const fetchSearch = searchTerm => ({\n  type: FETCH_SEARCH,\n  payload: searchTerm\n});\n\n// set action for updating visible results to dispatch through\nexport const fetchVisibleResults = visibleResults => ({\n  type: FETCH_VISIBLERESULTS,\n  payload: visibleResults\n});\n"]},"metadata":{},"sourceType":"module"}