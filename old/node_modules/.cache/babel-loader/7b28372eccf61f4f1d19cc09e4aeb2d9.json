{"ast":null,"code":"import _objectSpread from \"/Users/benjamindordoigne/Desktop/WMCA-Opportunities-App/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { FETCH_LOADING, FETCH_BLOGS, FETCH_ELIGIBILITIES, FETCH_WHERE, FETCH_AGE, FETCH_SKILLLEVELS, FETCH_CATEGORIES, FETCH_OPPORTUNITIES, FETCH_DATE, FETCH_SEARCH, FETCH_VISIBLERESULTS } from \"../actions/types\";\nconst INTIAL_STATE = {\n  getLoading: true,\n  getBlogs: null,\n  getSkillLevels: null,\n  getCategories: null,\n  getOpportunities: null,\n  getEligibilities: null,\n  getAge: null,\n  getWhere: null,\n  getDate: null,\n  getSearch: \"\",\n  getVisibleResults: 8\n}; // state is equal to an empty object by default\n// we don't want to mutate the state so must supply this as the first parameter\n\nexport default ((state = INTIAL_STATE, action) => {\n  switch (action.type) {\n    // create a copy of state, and show loading\n    case FETCH_LOADING:\n      return _objectSpread({}, state, {\n        getLoading: action.payload\n      });\n    // create a copy of state, set loading to false when blogs have all been fetched\n\n    case FETCH_BLOGS:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getBlogs: action.payload\n      });\n\n    case FETCH_SKILLLEVELS:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getSkillLevels: Array.from(new Set(state.getBlogs.ChildPages.map(blog => {\n          return blog.SkillLevel;\n        })))\n      });\n    // copy state and then set category state with unique categories from blogs\n\n    case FETCH_CATEGORIES:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getCategories: Array.from(new Set(state.getBlogs.ChildPages.map(blog => {\n          return blog.Category;\n        })))\n      });\n\n    case FETCH_OPPORTUNITIES:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getOpportunities: Array.from(new Set(state.getBlogs.ChildPages.map(blog => {\n          return blog.Opportunity;\n        })))\n      });\n\n    case FETCH_WHERE:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getWhere: Array.from(new Set(state.getBlogs.ChildPages.map(blog => {\n          return blog.Where;\n        })))\n      });\n\n    case FETCH_AGE:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getAge: Array.from(new Set(state.getBlogs.ChildPages.map(blog => {\n          return blog.Age;\n        })))\n      });\n\n    case FETCH_ELIGIBILITIES:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getEligibilities: Array.from(new Set(state.getBlogs.ChildPages.map(blog => {\n          return blog.Eligibility;\n        })))\n      });\n    // copy state and then map dates to state\n\n    case FETCH_DATE:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getDate: state.getBlogs.ChildPages.map(blog => {\n          return blog.PubDate;\n        })\n      });\n    // copy state and update search term value\n\n    case FETCH_SEARCH:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getSearch: action.payload\n      });\n    // copy state and update visible results value by an integer value\n\n    case FETCH_VISIBLERESULTS:\n      return _objectSpread({}, state, {\n        getLoading: false,\n        getVisibleResults: state.getVisibleResults + 8\n      });\n    // return previous state using the 'default' case for any unknown actions\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/benjamindordoigne/Desktop/WMCA-Opportunities-App/src/reducers/blog.reducer.jsx"],"names":["FETCH_LOADING","FETCH_BLOGS","FETCH_ELIGIBILITIES","FETCH_WHERE","FETCH_AGE","FETCH_SKILLLEVELS","FETCH_CATEGORIES","FETCH_OPPORTUNITIES","FETCH_DATE","FETCH_SEARCH","FETCH_VISIBLERESULTS","INTIAL_STATE","getLoading","getBlogs","getSkillLevels","getCategories","getOpportunities","getEligibilities","getAge","getWhere","getDate","getSearch","getVisibleResults","state","action","type","payload","Array","from","Set","ChildPages","map","blog","SkillLevel","Category","Opportunity","Where","Age","Eligibility","PubDate"],"mappings":"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","sourcesContent":["import {\n  FETCH_LOADING,\n  FETCH_BLOGS,\n  FETCH_ELIGIBILITIES,\n  FETCH_WHERE,\n  FETCH_AGE,\n  FETCH_SKILLLEVELS,\n  FETCH_CATEGORIES,\n  FETCH_OPPORTUNITIES,\n  FETCH_DATE,\n  FETCH_SEARCH,\n  FETCH_VISIBLERESULTS\n} from \"../actions/types\";\n\nconst INTIAL_STATE = {\n  getLoading: true,\n  getBlogs: null,\n  getSkillLevels: null,\n  getCategories: null,\n  getOpportunities: null,\n  getEligibilities: null,\n  getAge: null,\n  getWhere: null,\n  getDate: null,\n  getSearch: \"\",\n  getVisibleResults: 8\n};\n\n// state is equal to an empty object by default\n// we don't want to mutate the state so must supply this as the first parameter\nexport default (state = INTIAL_STATE, action) => {\n  switch (action.type) {\n    // create a copy of state, and show loading\n    case FETCH_LOADING:\n      return { ...state, getLoading: action.payload };\n    // create a copy of state, set loading to false when blogs have all been fetched\n    case FETCH_BLOGS:\n      return { ...state, getLoading: false, getBlogs: action.payload };\n    case FETCH_SKILLLEVELS:\n      return {\n        ...state,\n        getLoading: false,\n        getSkillLevels: Array.from(\n          new Set(\n            state.getBlogs.ChildPages.map(blog => {\n              return blog.SkillLevel;\n            })\n          )\n        )\n      };\n\n    // copy state and then set category state with unique categories from blogs\n    case FETCH_CATEGORIES:\n      return {\n        ...state,\n        getLoading: false,\n        getCategories: Array.from(\n          new Set(\n            state.getBlogs.ChildPages.map(blog => {\n              return blog.Category;\n            })\n          )\n        )\n      };\n\n    case FETCH_OPPORTUNITIES:\n      return {\n        ...state,\n        getLoading: false,\n        getOpportunities: Array.from(\n          new Set(\n            state.getBlogs.ChildPages.map(blog => {\n              return blog.Opportunity;\n            })\n          )\n        )\n      };\n\n    case FETCH_WHERE:\n      return {\n        ...state,\n        getLoading: false,\n        getWhere: Array.from(\n          new Set(\n            state.getBlogs.ChildPages.map(blog => {\n              return blog.Where;\n            })\n          )\n        )\n      };\n\n    case FETCH_AGE:\n      return {\n        ...state,\n        getLoading: false,\n        getAge: Array.from(\n          new Set(\n            state.getBlogs.ChildPages.map(blog => {\n              return blog.Age;\n            })\n          )\n        )\n      };\n\n    case FETCH_ELIGIBILITIES:\n      return {\n        ...state,\n        getLoading: false,\n        getEligibilities: Array.from(\n          new Set(\n            state.getBlogs.ChildPages.map(blog => {\n              return blog.Eligibility;\n            })\n          )\n        )\n      };\n\n    // copy state and then map dates to state\n    case FETCH_DATE:\n      return {\n        ...state,\n        getLoading: false,\n        getDate: state.getBlogs.ChildPages.map(blog => {\n          return blog.PubDate;\n        })\n      };\n    // copy state and update search term value\n    case FETCH_SEARCH:\n      return {\n        ...state,\n        getLoading: false,\n        getSearch: action.payload\n      };\n    // copy state and update visible results value by an integer value\n    case FETCH_VISIBLERESULTS:\n      return {\n        ...state,\n        getLoading: false,\n        getVisibleResults: state.getVisibleResults + 8\n      };\n    // return previous state using the 'default' case for any unknown actions\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}